/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GUI.java
 * Coded By: Fawad Jawaid ana Ali
 */

package final2;

import javax.swing.JOptionPane;


/**
 *
 *Coded By: M. Fawad Jawaid Malik (11k-2116) 
             Ali Manzar Jaffery (11k-2202) 
 */
public class GUI extends javax.swing.JFrame {
arc pro =  new arc();
int p=0;

    /** Creates new form GUI */
    public GUI()throws Exception {
        initComponents();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jFrame1 = new javax.swing.JFrame();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        filenamelabel = new javax.swing.JLabel();
        filename = new javax.swing.JTextField();
        loadbutton = new javax.swing.JButton();
        executeallbutton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        memdumptab = new javax.swing.JTabbedPane();
        jScrollPane7 = new javax.swing.JScrollPane();
        memdetails = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        processtable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        frametable = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        gpreg = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        srtable = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        blockprocesst = new javax.swing.JTable();
        refreshbutton = new javax.swing.JButton();
        debuggbutton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        pcbtable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        cptable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        dptable = new javax.swing.JTable();
        text1 = new javax.swing.JTextField();
        showbutton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtpid = new javax.swing.JTextField();
        execute = new javax.swing.JButton();
        killbutton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        blockbutton = new javax.swing.JButton();
        unblockbutton = new javax.swing.JButton();
        clonebutton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        shutdownbutton = new javax.swing.JMenu();
        memdumpbutton = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NEXUS VIRTUAL MACHINE");

        filenamelabel.setText("Process File Name:");

        filename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filenameActionPerformed(evt);
            }
        });

        loadbutton.setText("Load");
        loadbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadbuttonActionPerformed(evt);
            }
        });

        executeallbutton.setText("Execute All");
        executeallbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeallbuttonActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 204, 204));
        jLabel1.setFont(new java.awt.Font("Snap ITC", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/final2/nexus_logo2.gif"))); // NOI18N

        memdetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Occupied Frame No.", "Occupied by Process ID"
            }
        ));
        jScrollPane7.setViewportView(memdetails);

        memdumptab.addTab("MemoryDetails", jScrollPane7);

        processtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Process ID", "Process File Name"
            }
        ));
        jScrollPane8.setViewportView(processtable);

        memdumptab.addTab("Process in Memory", jScrollPane8);

        frametable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Frame Number", "Location from", "Location to"
            }
        ));
        jScrollPane4.setViewportView(frametable);

        memdumptab.addTab("FreeFrame", jScrollPane4);

        gpreg.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", null},
                {"2", null},
                {"3", null},
                {"4", null},
                {"5", null},
                {"6", null},
                {"7", null},
                {"8", null},
                {"9", null},
                {"10", null},
                {"11", null},
                {"12", null},
                {"13", null},
                {"14", null},
                {"15", null},
                {null, null}
            },
            new String [] {
                "Register no", "Value"
            }
        ));
        jScrollPane6.setViewportView(gpreg);

        memdumptab.addTab("GeneralPurposeReg", jScrollPane6);

        srtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", null},
                {"2", null},
                {"3", null},
                {"4", null},
                {"5", null},
                {"6", null},
                {"7", null},
                {"8", null},
                {"9", null},
                {"10", null},
                {"11", null},
                {"12", null},
                {"13", null},
                {"14", null},
                {"15", null},
                {null, null}
            },
            new String [] {
                "Register No.", "Value"
            }
        ));
        jScrollPane5.setViewportView(srtable);

        memdumptab.addTab("SpecialPurposeReg", jScrollPane5);

        blockprocesst.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Process ID", "Process file name"
            }
        ));
        jScrollPane9.setViewportView(blockprocesst);

        memdumptab.addTab("Block Process", jScrollPane9);

        refreshbutton.setText("Refresh");
        refreshbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshbuttonActionPerformed(evt);
            }
        });

        debuggbutton.setText("Debug");
        debuggbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debuggbuttonActionPerformed(evt);
            }
        });

        pcbtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Process Filename", ""},
                {"Process Priority", null},
                {"Proces ID", null},
                {"Process Code Size", null},
                {"Process Data Size", null}
            },
            new String [] {
                "PCB Content", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(pcbtable);

        jTabbedPane1.addTab("PCB", jScrollPane1);

        cptable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Integer(0), null},
                { new Integer(1), null},
                { new Integer(2), null},
                { new Integer(3), null},
                { new Integer(4), null},
                { new Integer(5), null},
                { new Integer(6), null},
                { new Integer(7), null},
                { new Integer(8), null},
                { new Integer(9), null},
                { new Integer(10), null},
                { new Integer(11), null},
                { new Integer(12), null},
                { new Integer(13), null},
                { new Integer(14), null},
                { new Integer(15), null},
                { new Integer(16), null},
                { new Integer(17), null},
                { new Integer(18), null},
                { new Integer(19), null}
            },
            new String [] {
                "Page Number", "Frame Number"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(cptable);

        jTabbedPane1.addTab("CodePagetable", jScrollPane2);

        dptable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Integer(0), null},
                { new Integer(1), null},
                { new Integer(2), null},
                { new Integer(3), null},
                { new Integer(4), null},
                { new Integer(5), null},
                { new Integer(6), null},
                { new Integer(7), null},
                { new Integer(8), null},
                { new Integer(9), null},
                { new Integer(10), null},
                { new Integer(11), null},
                { new Integer(12), null},
                { new Integer(13), null},
                { new Integer(14), null},
                { new Integer(15), null},
                { new Integer(16), null},
                { new Integer(17), null},
                { new Integer(18), null},
                { new Integer(19), null}
            },
            new String [] {
                "Page Number", "Frame Number"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(dptable);

        jTabbedPane1.addTab("DataPageTable", jScrollPane3);

        showbutton.setText("Show");
        showbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showbuttonActionPerformed(evt);
            }
        });

        jLabel2.setText("Enter PID:");

        jLabel3.setText("Process ID:");

        execute.setText("Execute");
        execute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeActionPerformed(evt);
            }
        });

        killbutton.setText("Kill");
        killbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                killbuttonActionPerformed(evt);
            }
        });

        blockbutton.setText("Block");
        blockbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockbuttonActionPerformed(evt);
            }
        });

        unblockbutton.setText("unblock");
        unblockbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unblockbuttonActionPerformed(evt);
            }
        });

        clonebutton.setText("Clone");
        clonebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clonebuttonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 255));
        jLabel5.setText("A VM by Fawad J. & Ali M.");

        shutdownbutton.setForeground(new java.awt.Color(51, 51, 255));
        shutdownbutton.setText("Menu");
        shutdownbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shutdownbuttonActionPerformed(evt);
            }
        });

        memdumpbutton.setText("Memory Dump");
        memdumpbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memdumpbuttonActionPerformed(evt);
            }
        });
        shutdownbutton.add(memdumpbutton);
        shutdownbutton.add(jSeparator1);

        jMenuItem2.setText("Hibernate");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        shutdownbutton.add(jMenuItem2);

        jMenuItem3.setText("Shut Down");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        shutdownbutton.add(jMenuItem3);

        jMenuBar1.add(shutdownbutton);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(133, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(memdumptab, javax.swing.GroupLayout.PREFERRED_SIZE, 548, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(refreshbutton))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(41, 41, 41)
                                    .addComponent(filenamelabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(filename, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(loadbutton)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(txtpid, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(executeallbutton)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(killbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(blockbutton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(clonebutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(debuggbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(execute)
                                    .addComponent(unblockbutton))
                                .addGap(45, 45, 45)
                                .addComponent(jLabel4)))
                        .addGap(124, 124, 124))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addGap(274, 274, 274))))
            .addGroup(layout.createSequentialGroup()
                .addGap(167, 167, 167)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(text1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showbutton)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(355, 355, 355)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filenamelabel)
                            .addComponent(filename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(loadbutton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(memdumptab, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(refreshbutton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtpid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3)
                                .addComponent(executeallbutton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(execute)
                                    .addComponent(killbutton)
                                    .addComponent(debuggbutton))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(clonebutton)
                                    .addComponent(unblockbutton)
                                    .addComponent(blockbutton))))
                        .addGap(33, 33, 33)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(text1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(showbutton))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addGap(28, 28, 28)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadbuttonActionPerformed
        String filename=this.filename.getText();       //reading file
       try{
           p=1;                                           //filling PCB table
           pro.load(filename);
           pcbtable.setValueAt(pro.p1.pcb.getpfilename(), 0, 1);
           pcbtable.setValueAt(pro.p1.pcb.getppriority(), 1, 1);
           pcbtable.setValueAt(pro.p1.pcb.getpid(), 2, 1);
           pcbtable.setValueAt(pro.p1.pcb.getcodesize(), 3, 1);
           pcbtable.setValueAt(pro.p1.pcb.getdatasize(), 4, 1);
           
           int i=0;                        //filling code page table value
           while(i<20){
           cptable.setValueAt(pro.p1.pcb.get_cpt(i), i, 1) ;
           i++;
           }
           
           i=0;                               //filling data page table value
           while(i<20){
           dptable.setValueAt(pro.p1.pcb.get_dpt(i), i, 1) ;
           i++;
           }
         
  

       }catch(Exception e){
       JOptionPane.showMessageDialog(this,"Bad File Name","Error",JOptionPane.ERROR_MESSAGE);
       return;
    }

        int i=0;                 //filling free frame table
        int f=0;
        int c=0;
        while(i<64){
        if(pro.p1.mem1.memtable.getf(i)==0)
            { frametable.setValueAt(i,f,0);
            frametable.setValueAt(i*1024,f,1);
            frametable.setValueAt((i*1024)+1024, f, 2); f++;}
        i++;
        }

     f=0;
     int n=0;
     Process temp=new Process();
     
  while(n<pro.q2.size()){
      temp=pro.q2.dequeue();
      pro.q2.enqueue(temp);

      i=0;
     while(i<20){
     if(temp.pcb.codept.getflag(i)==1){
       memdetails.setValueAt(temp.pcb.getpid(), f, 0);
       memdetails.setValueAt(temp.pcb.getpfilename(), f, 1);
      f++;
     }
     i++;
     }
 i=0;
      while(i<20){
     if(temp.pcb.datapt.getflag(i)==1){
       memdetails.setValueAt(temp.pcb.getpid(), f, 0);
       memdetails.setValueAt(temp.pcb.getpfilename(), f, 1);
      f++;          
     }
     i++;
     }


  n++;
  }
     while(f<64){
            memdetails.setValueAt("",f,0);
         memdetails.setValueAt("",f,1);
            f++;
        }
        
     
       //filling Process in memory table
        i=0;
        while(i<pro.q2.size()){
         temp=pro.q2.dequeue();
         pro.q2.enqueue(temp);
        processtable.setValueAt(temp.pcb.getpid(),i,0);
        processtable.setValueAt(temp.pcb.getpfilename(),i,1);
        i++;
        }

        while(i<10){
        processtable.setValueAt("",i,0);
        processtable.setValueAt("",i,1);
        i++;
        }


    }//GEN-LAST:event_loadbuttonActionPerformed
  
        private void executeallbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeallbuttonActionPerformed

           if(!pro.q1.isEmpty()){  //execute all func
             try{
         pro.execute();
        }
     catch(Exception e){
     JOptionPane.showMessageDialog(this,"Error Executing","Error",
             JOptionPane.ERROR_MESSAGE);
     }

             short i=0;                         //update the special reg table
            while(i<15){
            srtable.setValueAt(pro.p1.pcb.reg.get_spl_reg(i), i, 1);
            i++;
            }

            i=0;
            while(i<16){                         //update the general reg table
            gpreg.setValueAt(pro.p1.pcb.reg.get_gen_reg(i), i, 1);
            i++;
            }
           }
           else{
            JOptionPane.showMessageDialog(this,"No Process Loaded","Error",
                    JOptionPane.ERROR_MESSAGE);
           }

        }//GEN-LAST:event_executeallbuttonActionPerformed

        
           



        private void refreshbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshbuttonActionPerformed

        int  i=0;                 //refresh free frame tables
        int f=0;
        int c=0;
        while(i<64){
        if(pro.p1.mem1.memtable.getf(i)==0)
            { frametable.setValueAt(i,f,0);
            frametable.setValueAt(i*1024,f,1);
            frametable.setValueAt((i*1024)+1024, f, 2); f++;}
            i++;}
        

     f=0;
     int n=0;
     Process temp=new Process();

  while(n<pro.q2.size()){
      temp=pro.q2.dequeue();
      pro.q2.enqueue(temp);

      i=0;
     while(i<20){
     if(temp.pcb.codept.getflag(i)==1){
       memdetails.setValueAt(temp.pcb.getpid(), f, 0);
       memdetails.setValueAt(temp.pcb.getpfilename(), f, 1);
      f++;
     }
     i++;
     }
i=0;
      while(i<20){
     if(temp.pcb.datapt.getflag(i)==1){
       memdetails.setValueAt(temp.pcb.getpid(), f, 0);
       memdetails.setValueAt(temp.pcb.getpfilename(), f, 1);
      f++;
     }
     i++;
     }


  n++;
  }
     while(f<64){
            memdetails.setValueAt("",f,0);
         memdetails.setValueAt("",f,1);
            f++;
        }

                // update process table
        i=0;
        while(i<pro.q2.size()){
         temp=pro.q2.dequeue();
         pro.q2.enqueue(temp);
        processtable.setValueAt(temp.pcb.getpid(),i,0);
        processtable.setValueAt(temp.pcb.getpfilename(),i,1);
        i++;
        }

        while(i<10){
        processtable.setValueAt("",i,0);
        processtable.setValueAt("",i,1);
        i++;
        }



        }//GEN-LAST:event_refreshbuttonActionPerformed

        private void debuggbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debuggbuttonActionPerformed
           int d=0;                             //execute specific pid process
        if(!(txtpid.getText().equals(""))){
        queue <Process>q3 = new queue<Process>();
        queue <Process>q4 = new queue<Process>();
        Process p=new Process();
        int temp=Integer.parseInt(txtpid.getText());

        while(!pro.q2.isEmpty()){
          p= pro.q2.dequeue();
          q3.enqueue(p);
          q4.enqueue(p);
        }

        while(!q4.isEmpty()){
          pro.q2.enqueue(q4.dequeue());
        }

        int f=0;
       try{while(!q3.isEmpty()){
          p=q3.dequeue();
          int pid=p.pcb.getpid();
          if(pid==temp){
             d=1;
             pro.debug(p);
           }
         }
       }catch(Exception e){}
        }
        else{JOptionPane.showMessageDialog(this,"Please enter PID","Error",
                JOptionPane.ERROR_MESSAGE);return;}

        if(d==0){JOptionPane.showMessageDialog(this,"No Such PID","Error",
                JOptionPane.ERROR_MESSAGE);}
        }//GEN-LAST:event_debuggbuttonActionPerformed

        private void shutdownbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shutdownbuttonActionPerformed
            System.exit(0);   //shutdown button
}//GEN-LAST:event_shutdownbuttonActionPerformed

        private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
            try{
            pro.mksummary();   //make summary-txt file
            String total=String.valueOf(pro.i);
            String log="%%% Total Clock Cycles used for execution: "+total;
            pro.mklogtxt(log);
            System.exit(0);
            }catch(Exception e){}
}//GEN-LAST:event_jMenuItem3ActionPerformed

        private void memdumpbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memdumpbuttonActionPerformed
            memdump fr1 = new memdump(); //mumeory dump file
            fr1.setVisible(true);
}//GEN-LAST:event_memdumpbuttonActionPerformed

        private void showbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showbuttonActionPerformed

        queue <Process>q3 = new queue<Process>();  //show attributes of specfic pid process
        queue <Process>q4 = new queue<Process>();
        Process p=new Process();
        int temp=Integer.parseInt(text1.getText());

        while(!pro.q2.isEmpty()){
          p= pro.q2.dequeue();
          q3.enqueue(p);
          q4.enqueue(p);
        }

        while(!q4.isEmpty()){
          pro.q2.enqueue(q4.dequeue());
        }

        int f=0;
        while(!q3.isEmpty()){
          p=q3.dequeue();
          int pid=p.pcb.getpid();
          if(pid==temp){
              f=1;
           pcbtable.setValueAt(p.pcb.getpfilename(), 0, 1);
           pcbtable.setValueAt(p.pcb.getppriority(), 1, 1);
           pcbtable.setValueAt(p.pcb.getpid(), 2, 1);
           pcbtable.setValueAt(p.pcb.getcodesize(), 3, 1);
           pcbtable.setValueAt(p.pcb.getdatasize(), 4, 1);
           int i=0;
           while(i<20){
           cptable.setValueAt(p.pcb.get_cpt(i), i, 1) ;
           i++;
           }
           i=0;
           while(i<20){
           dptable.setValueAt(p.pcb.get_dpt(i), i, 1) ;
           i++;
           }

          }
        }
        
        if(f==0){JOptionPane.showMessageDialog(this,"No such PID","Error",JOptionPane.ERROR_MESSAGE);}


        }//GEN-LAST:event_showbuttonActionPerformed

        private void executeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeActionPerformed
        int d=0;                             //execute specific pid process
        if(!(txtpid.getText().equals(""))){
        queue <Process>q3 = new queue<Process>();
        queue <Process>q4 = new queue<Process>();
        Process p=new Process();
        int temp=Integer.parseInt(txtpid.getText());

        while(!pro.q2.isEmpty()){
          p= pro.q2.dequeue();
          q3.enqueue(p);
          q4.enqueue(p);
        }

        while(!q4.isEmpty()){
          pro.q2.enqueue(q4.dequeue());
        }

        int f=0;
       try{while(!q3.isEmpty()){
          p=q3.dequeue();
          int pid=p.pcb.getpid();
          if(pid==temp){
             d=1;
             pro.execute(p);
           }
         }
       }catch(Exception e){}
        }
        else{JOptionPane.showMessageDialog(this,"Please enter PID","Error",
                JOptionPane.ERROR_MESSAGE);return;}

        if(d==0){JOptionPane.showMessageDialog(this,"No Such PID","Error",
                JOptionPane.ERROR_MESSAGE);}
        }//GEN-LAST:event_executeActionPerformed

        private void killbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_killbuttonActionPerformed
            int d=0;            //kill specific pid process
        if(!(txtpid.getText().equals(""))){
        queue <Process>q3 = new queue<Process>();
        queue <Process>q4 = new queue<Process>();
        Process p=new Process();
        int temp=Integer.parseInt(txtpid.getText());

        while(!pro.q2.isEmpty()){
          p= pro.q2.dequeue();
          q3.enqueue(p);
          q4.enqueue(p);
        }

        while(!q4.isEmpty()){
          pro.q2.enqueue(q4.dequeue());
        }

        int f=0;
       try{while(!q3.isEmpty()){
          p=q3.dequeue();
          int pid=p.pcb.getpid();
          if(pid==temp){
             d=1;
             pro.terminate(p);
           }
         }
       }catch(Exception e){}
        }
        else{JOptionPane.showMessageDialog(this,"Please enter PID","Error",
                JOptionPane.ERROR_MESSAGE);}

        if(d==0){JOptionPane.showMessageDialog(this,"No Such PID","Error",
                JOptionPane.ERROR_MESSAGE);}
        }//GEN-LAST:event_killbuttonActionPerformed

        private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
            //Fawad
        }//GEN-LAST:event_jMenuItem2ActionPerformed

        private void blockbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockbuttonActionPerformed
             int d=0;            //block specific pid process
        if(!(txtpid.getText().equals(""))){
            int n=0;
            Process p=new Process();
        int temp=Integer.parseInt(txtpid.getText());
        while(n<pro.q1.size()){
            p=pro.q1.dequeue();
            if(temp!=p.pcb.getpid()){pro.q1.enqueue(p);}
            else{pro.blk.enqueue(p);d=1;}
            n++;
        }
        }
        else{JOptionPane.showMessageDialog(this,"Please enter PID","Error",
                JOptionPane.ERROR_MESSAGE);}

        if(d==0){JOptionPane.showMessageDialog(this,"No Such Process in Active Queue","Error",
                JOptionPane.ERROR_MESSAGE);}


     
     int n=0;
     Process temp=new Process();

  while(n<pro.blk.size()){
      temp=pro.blk.dequeue();
      pro.blk.enqueue(temp);
      blockprocesst.setValueAt(temp.pcb.getpid(),n,0);
      blockprocesst.setValueAt(temp.pcb.getpfilename(), n, 1);
  n++;
  }
     while(n<64){
         blockprocesst.setValueAt("",n,0);
         blockprocesst.setValueAt("",n,1);
            n++;
        }

        }//GEN-LAST:event_blockbuttonActionPerformed

        private void unblockbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unblockbuttonActionPerformed
              int d=0;            //block specific pid process
        if(!(txtpid.getText().equals(""))){
            int n=0;
            Process p=new Process();
        int temp=Integer.parseInt(txtpid.getText());
        while(n<pro.blk.size()){
            p=pro.blk.dequeue();
            if(temp!=p.pcb.getpid()){pro.blk.enqueue(p);}
            else{pro.q1.enqueue(p);d=1;}
            n++;
        }
        }
        else{JOptionPane.showMessageDialog(this,"Please enter PID","Error",
                JOptionPane.ERROR_MESSAGE);}

        if(d==0){JOptionPane.showMessageDialog(this,"No Such Process in Active Queue","Error",
                JOptionPane.ERROR_MESSAGE);}



     int n=0;
     Process temp=new Process();

  while(n<pro.blk.size()){
      temp=pro.blk.dequeue();
      pro.blk.enqueue(temp);
      blockprocesst.setValueAt(temp.pcb.getpid(),n,0);
      blockprocesst.setValueAt(temp.pcb.getpfilename(), n, 1);
  n++;
  }
     while(n<64){
         blockprocesst.setValueAt("",n,0);
         blockprocesst.setValueAt("",n,1);
            n++;
        }
   
        }//GEN-LAST:event_unblockbuttonActionPerformed

        private void clonebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clonebuttonActionPerformed

             int d=0;            //make clone of specific pid process
        if(!(txtpid.getText().equals(""))){
        queue <Process>q3 = new queue<Process>();
        queue <Process>q4 = new queue<Process>();
        Process p=new Process();
        int temp=Integer.parseInt(txtpid.getText());

        while(!pro.q2.isEmpty()){
          p= pro.q2.dequeue();
          q3.enqueue(p);
          q4.enqueue(p);
        }

        while(!q4.isEmpty()){
          pro.q2.enqueue(q4.dequeue());
        }

        int f=0;
       try{while(!q3.isEmpty()){
          p=q3.dequeue();
          int pid=p.pcb.getpid();
          if(pid==temp){
             d=1;
             pro.load(p.pcb.getpfilename());
           }
         }
       }catch(Exception e){}
        }
        else{JOptionPane.showMessageDialog(this,"Please enter PID","Error",
                JOptionPane.ERROR_MESSAGE);}

        if(d==0){JOptionPane.showMessageDialog(this,"No Such PID","Error",
                JOptionPane.ERROR_MESSAGE);}

           pcbtable.setValueAt(pro.p1.pcb.getpfilename(), 0, 1);
           pcbtable.setValueAt(pro.p1.pcb.getppriority(), 1, 1);
           pcbtable.setValueAt(pro.p1.pcb.getpid(), 2, 1);
           pcbtable.setValueAt(pro.p1.pcb.getcodesize(), 3, 1);
           pcbtable.setValueAt(pro.p1.pcb.getdatasize(), 4, 1);

           int i=0;                        //filling code page table value
           while(i<20){
           cptable.setValueAt(pro.p1.pcb.get_cpt(i), i, 1) ;
           i++;
           }

           i=0;                               //filling data page table value
           while(i<20){
           dptable.setValueAt(pro.p1.pcb.get_dpt(i), i, 1) ;
           i++;
           }
        }//GEN-LAST:event_clonebuttonActionPerformed

    private void filenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filenameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filenameActionPerformed
    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try{
                new GUI().setVisible(true);}
                catch(Exception e){

                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton blockbutton;
    private javax.swing.JTable blockprocesst;
    private javax.swing.JButton clonebutton;
    private javax.swing.JTable cptable;
    private javax.swing.JButton debuggbutton;
    private javax.swing.JTable dptable;
    private javax.swing.JButton execute;
    private javax.swing.JButton executeallbutton;
    private javax.swing.JTextField filename;
    private javax.swing.JLabel filenamelabel;
    private javax.swing.JTable frametable;
    private javax.swing.JTable gpreg;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton killbutton;
    private javax.swing.JButton loadbutton;
    private javax.swing.JTable memdetails;
    private javax.swing.JMenuItem memdumpbutton;
    private javax.swing.JTabbedPane memdumptab;
    private javax.swing.JTable pcbtable;
    private javax.swing.JTable processtable;
    private javax.swing.JButton refreshbutton;
    private javax.swing.JButton showbutton;
    private javax.swing.JMenu shutdownbutton;
    private javax.swing.JTable srtable;
    private javax.swing.JTextField text1;
    private javax.swing.JTextField txtpid;
    private javax.swing.JButton unblockbutton;
    // End of variables declaration//GEN-END:variables

}
